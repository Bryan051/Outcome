# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
#      with:
#        fetch-depth: 0      # 전체 히스토리를 가져옵니다.
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    # application properties
    - name: application.properties
      run: |
        cd src/main
        mkdir resources
        cd resources
        touch application.properties
        echo "${{ secrets.APPLICATION_PROPERTIES }}">> application.properties
      shell: bash

    - name: Build with Gradle Wrapper
      run: ./gradlew build
      # build/libs 디렉토리의 파일 목록을 출력합니다.
    - name: Show Gradle Build Result
      run: |
          echo "Gradle build completed!"
          ls -R ./build/libs  
    # JAR 파일을 Docker 빌드 컨텍스트로 복사
    - name: Copy JAR to root
      run: cp build/libs/Outcome-0.0.1-SNAPSHOT.jar .
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build docker image
      run: docker build -t iri051/app:latest .
    - name: Publish image to docker hub
      run: docker push iri051/app:latest

    - name: Ec2 docker-compose up
      uses: appleboy/ssh-action@master
      with:
        host: ${{secrets.HOST}}
        username: ubuntu
        key: ${{secrets.KEYPAIR}}
        script: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker compose down
          docker rmi ${{ secrets.DOCKER_REPO }}:latest
          docker pull ${{ secrets.DOCKER_REPO }}:latest
          docker compose up -d
          docker logout

#      uses: docker/build-push-action@v6
#      with:
##        Docker Build 컨텍스트 설정: Docker 빌드 컨텍스트가 올바르게 설정되었는지 확인합니다.
##         여기서는 프로젝트 루트 디렉토리(context: .)를 빌드 컨텍스트로 설정합니다.
#        context: .
#        push: true
#        tags: ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
#        file: ./Dockerfile
#  deploy:
#    needs: build
#    # aws ec2 를 github-action runners 에 등록 해 둬서 엑세스 가능 하게 함
#    runs-on: [aws-ec2]
#    steps:
#      - name: Pull Image from docker hub
#        run: sudo docker pull iri051/app:latest
#      - name: Delete old container
#        run: docker rm -f spring-outcome-container
#      - name: Run docker container
#        run: docker run -d -p 8080:8080 --name spring-outcome-container iri051/app

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    
